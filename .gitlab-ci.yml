# do not use "latest" here, if you want this to work in the future
image: docker:18

stages:
  - test
  - build
  - push
  - deploy

variables:
  # fill those if you have a proxy in your environment
  http_proxy: ''
  https_proxy: ''
  no_proxy: ''

Test Frater:
  stage: test
  services:
    - python:3.7.4-alpine3.10
  before_script:
    - pip3 install docker-compose pytest pytest-docker-compose
    - pip3 install -r requirements.txt
    - docker-compose -f tests/docker-compose.yml up -d
  script:
    - pytest

  after_script:
    - docker-compose -f tests/docker-compose.yml down

Build Frater:
  stage: build
  services:
    - docker:dind

  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  script:
    # CPU build
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from $CI_REGISTRY_IMAGE:latest
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      -f docker/Dockerfile
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

    # GPU build
    - docker pull  $CI_REGISTRY_IMAGE:latest-gpu || true
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from $CI_REGISTRY_IMAGE:latest-gpu
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-gpu
      -f docker/GPU.Dockerfile
      .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-gpu

Push Frater latest:
  variables:
    GIT_STRATEGY: none
  stage: push
  services:
    - docker:dind

  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  only:
    - master
  script:
    # CPU build
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    # GPU build
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-gpu
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-gpu $CI_REGISTRY_IMAGE:latest-gpu
    - docker push $CI_REGISTRY_IMAGE:latest-gpu


Push Frater tag:
  variables:
    GIT_STRATEGY: none
  stage: push
  services:
    - docker:dind

  before_script:
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  only:
    - tags
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-gpu
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-gpu
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-gpu

Trigger DIVA System Build:
  stage: deploy
  only:
    - master
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script:
    - "curl -X POST -F token=717383ef754b0ec8501389c56b4973 -F ref=master https://gitlab.com/api/v4/projects/12811740/trigger/pipeline"